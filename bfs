#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

int adjMatrix[MAX_SIZE][MAX_SIZE];
int visited[MAX_SIZE];
int n;

typedef struct Node {
    int vertex;
    struct Node* next;
} Node;

Node* adjacencyList[MAX_SIZE];

void initialize() {
    int i;
    for (i = 0; i < MAX_SIZE; i++) {
        visited[i] = 0;
        adjacencyList[i] = NULL;
    }
}

void createGraph() {
    int i, u, v, edges;
    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter number of edges: ");
    scanf("%d", &edges);
    for (i = 0; i < edges; i++) {
        printf("Enter edge (u v): ");
        scanf("%d %d", &u, &v);
        adjMatrix[u][v] = 1;
        // For directed graph, remove the below line
        adjMatrix[v][u] = 1;
        
        
        Node* newNode = (Node*)malloc(sizeof(Node));
        newNode->vertex = v;
        newNode->next = adjacencyList[u];
        adjacencyList[u] = newNode;
        
        newNode = (Node*)malloc(sizeof(Node));
        newNode->vertex = u;
        newNode->next = adjacencyList[v];
        adjacencyList[v] = newNode;
    }
}

void DFS_Matrix(int vertex) {
    int i;
    printf("%d ", vertex);
    visited[vertex] = 1;
    for (i = 0; i < n; i++) {
        if (adjMatrix[vertex][i] && !visited[i]) {
            DFS_Matrix(i);
        }
    }
}

void BFS_Matrix(int startVertex) {
    int i, currentVertex;
    int queue[MAX_SIZE];
    int front = -1, rear = -1;
    visited[startVertex] = 1;
    queue[++rear] = startVertex;
    printf("%d ", startVertex);
    while (front != rear) {
        currentVertex = queue[++front];
        for (i = 0; i < n; i++) {
            if (adjMatrix[currentVertex][i] && !visited[i]) {
                visited[i] = 1;
                queue[++rear] = i;
                printf("%d ", i);
            }
        }
    }
}

void DFS_List(int vertex) {
    printf("%d ", vertex);
    visited[vertex] = 1;
    Node* temp = adjacencyList[vertex];
    while (temp != NULL) {
        int connectedVertex = temp->vertex;
        if (!visited[connectedVertex]) {
            DFS_List(connectedVertex);
        }
        temp = temp->next;
    }
}

void BFS_List(int startVertex) {
    int currentVertex;
    int queue[MAX_SIZE];
    int front = -1, rear = -1;
    visited[startVertex] = 1;
    queue[++rear] = startVertex;
    printf("%d ", startVertex);
    while (front != rear) {
        currentVertex = queue[++front];
        Node* temp = adjacencyList[currentVertex];
        while (temp != NULL) {
            int connectedVertex = temp->vertex;
            if (!visited[connectedVertex]) {
                visited[connectedVertex] = 1;
                queue[++rear] = connectedVertex;
                printf("%d ", connectedVertex);
            }
            temp = temp->next;
        }
    }
}

int main() {
    int choice, startVertex;
    initialize();
    createGraph();
    printf("Enter starting vertex: ");
    scanf("%d", &startVertex);
    do {
        printf("\nMenu:\n");
        printf("1. Depth First Search (DFS) - Adjacency Matrix\n");
        printf("2. Breadth First Search (BFS) - Adjacency Matrix\n");
        printf("3. Depth First Search (DFS) - Adjacency List\n");
        printf("4. Breadth First Search (BFS) - Adjacency List\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        for (int i = 0; i < n; i++) {
            visited[i] = 0;
        }

        switch (choice) {
            case 1:
                printf("DFS using Adjacency Matrix: ");
                DFS_Matrix(startVertex);
                break;
            case 2:
                printf("BFS using Adjacency Matrix: ");
                BFS_Matrix(startVertex);
                break;
            case 3:
                printf("DFS using Adjacency List: ");
                DFS_List(startVertex);
                break;
            case 4:
                printf("BFS using Adjacency List: ");
                BFS_List(startVertex);
                break;
            case 5:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    } while (choice != 5);

    return 0;
}
